#include<iostream>
#include<string>
#include<fstream>
#include <limits>

using namespace std;
const int MAX=100;
fstream f;
int myindex=0;

void reload();
class master
{
public:
    master()
    {
        reload();
    }
    void setuid(int index,string data)
    {
        uid[index]=stoi(data);
    }
    int getuid(int index)
    {
        return uid[index];
    }
    void setuname(int index,string data)
    {
        uname[index]=data;
    }
    string getuname(int index)
    {
        return uname[index];
    }
    void setupass(int index,string data)
    {
        upass[index]=data;
    }
    string getupass(int index)
    {
        return upass[index];
    }
    void setuamount(int index,string data)
    {
        uamount[index]=stoi(data);
    }
    int getuamount(int index)
    {
        return uamount[index];
    }
    void setuage(int index, string data)
    {
        uage[index]=stoi(data);
    }
    int getuage(int index)
    {
        return uage[index];
    }
    void setulocat(int index,string data)
    {
        ulocat[index]=data;
    }
    string getulocat(int index)
    {
        return ulocat[index];
    }
private:
    int uid[MAX];
    string uname[MAX];
    string upass[MAX];
    int uamount[MAX];
    int uage[MAX];
    string ulocat[MAX];
};
master obj;
void reload()
{
    string temp;
    f.open("database.txt",ios::in);
    if (!f)
    {
        f.close();
        ofstream database("database.txt");
        database.close();
        return;
    }
    while(f.peek() != EOF)
    {
        getline(f,temp,'|');
        obj.setuid(myindex,temp);
        getline(f,temp,'|');
        obj.setuname(myindex,temp);
        getline(f,temp,'|');
        obj.setupass(myindex,temp);
        getline(f,temp,'|');
        obj.setuamount(myindex,temp);
        getline(f,temp,'|');
        obj.setuage(myindex,temp);
        getline(f,temp,'\n');
        obj.setulocat(myindex,temp);
        myindex++;
    }
    f.close();
}
class isu
{
public:
    string temp;
    isu()
    {
        int option=0;
        cout<<"1.insert\n2.search\n3.update\n0.exit"<<endl;
        cin>>option;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        switch (option)
        {
            case 1:
                insert();
                break;
            case 2:
                search();
                break;
            case 3:
                update();
                break;
            case 0:
                exit(0);
            default:
                cout<<"Invalid option";
                isu();
        }
    }
    void insert()
    {
        f.open("database.txt",ios::app);
        cout<<"Enter Your username : ";
        getline(cin,temp);
        obj.setuname(myindex,temp);

        cout<<"Enter Your password : ";
        getline(cin,temp);
        obj.setupass(myindex,temp);

        cout<<"Enter money amount : ";
        cin>>temp;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        obj.setuamount(myindex,temp);

        cout<<"Enter age : ";
        cin>>temp;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        obj.setuage(myindex,temp);

        cout<<"Enter location : ";
        getline(cin,temp);
        obj.setulocat(myindex,temp);
        f<<myindex+1<<"|"<<obj.getuname(myindex)<<"|"<<obj.getupass(myindex)<<"|"<<obj.getuamount(myindex)<<"|"<<obj.getuage(myindex)<<"|"<<obj.getulocat(myindex)<<endl;
        myindex++;
        f.close();
        isu();
    }
    void search()
    {
        cout<<"Enter username to search : ";
        getline(cin,temp);
        for (int i = 0; i < myindex; ++i)
        {
            if(temp==obj.getuname(i))
            {
                cout<<obj.getuid(i)<<"|"<<obj.getuname(i)<<"|"<<obj.getupass(i)<<"|"<<obj.getuamount(i)<<"|"<<obj.getuage(i)<<"|"<<obj.getulocat(i)<<endl;
                isu();
                return;
            }
        }
        printf("Username not found!\n");
    }
    void update()
    {
        int option=0;
        cout<<"Enter username to update : ";
        getline(cin,temp);
        for (int i = 0; i < myindex; ++i)
        {
            if(temp==obj.getuname(i))
            {
                cout<<obj.getuid(i)<<"|"<<obj.getuname(i)<<"|"<<obj.getupass(i)<<"|"<<obj.getuamount(i)<<"|"<<obj.getuage(i)<<"|"<<obj.getulocat(i)<<endl;
                opt:
                cout<<"1.update username\n2.update password\n3.update amount\n4.update age\n5.update location\n0.return"<<endl;
                cin>>option;
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                switch (option)
                {
                    case 0:
                        return;
                    case 1:
                        cout<<("Enter username to update : ");
                        getline(cin,temp);
                        obj.setuname(i,temp);
                        break;
                    case 2:
                        cout<<("Enter password to update : ");
                        getline(cin,temp);
                        obj.setupass(i,temp);
                        break;
                    case 3:
                        cout<<("Enter amount to update : ");
                        cin>>temp;
                        cin.ignore( MAX, '\n' );
                        obj.setuamount(i,temp);
                        break;
                    case 4:
                        cout<<("Enter age to update : ");
                        cin>>temp;
                        cin.ignore( MAX, '\n' );
                        obj.setuage(i,temp);
                        break;
                    case 5:
                        cout<<("Enter location to update : ");
                        getline(cin,temp);
                        obj.setulocat(i,temp);
                        break;
                    default:
                        cout<<("Not option found!\n");
                        goto opt;
                        break;
                }
                write();
                isu();
            }
        }
    }
private:
    void write()
    {
        f.open("database.txt",ios::out);
        if (!f)
        {
            f.close();
            ofstream database("database.txt");
            database.close();
            f.open("database.txt",ios::out);
        }
        for (int i = 0; i < myindex; ++i)
        {
            f<<obj.getuid(i)<<"|"<<obj.getuname(i)<<"|"<<obj.getupass(i)<<"|"<<obj.getuamount(i)<<"|"<<obj.getuage(i)<<"|"<<obj.getulocat(i)<<endl;
        }

    }
};
int main()
{
    isu myisu;
    return 0;
}
